# -*- coding: utf-8 -*-
"""NBA MVP 2024 Scraping

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12-0p0reEjpic8sGGC1t8q7yfRdjqodTC
"""

from bs4 import BeautifulSoup, Comment
from google.colab import drive
from urllib.request import Request, urlopen
import pandas
import re
import time
import warnings
warnings.filterwarnings('ignore')

pandas.set_option('display.max_columns', None)

seasons = list(range(1980, 2025))

basic_stats_per_season = []
for season in seasons:
    soup = BeautifulSoup(urlopen(Request('https://www.basketball-reference.com/leagues/NBA_{}_per_game.html'.format(season), headers = {'User-Agent': 'Safari'})))

    headers = [th.getText() for th in soup.findAll('tr', limit = 2)[0].findAll('th')][1:]
    rows = soup.findAll('tr', class_ = lambda x: x != 'thead')[1:]

    players_stats = [[td.getText() for td in rows[row].findAll('td')] for row in range(len(rows))]
    stats = pandas.DataFrame(players_stats, columns = headers)
    stats['Season'] = season

    basic_stats_per_season.append(stats)

    time.sleep(5)

basic_stats = pandas.concat(basic_stats_per_season)
basic_stats.tail()

advanced_stats_per_season = []
for season in seasons:
    soup = BeautifulSoup(urlopen(Request('https://www.basketball-reference.com/leagues/NBA_{}_advanced.html'.format(season), headers = {'User-Agent': 'Safari'})))

    headers = [th.getText() for th in soup.findAll('tr', limit = 2)[0].findAll('th')][1:]
    rows = soup.findAll('tr', class_ = lambda x: x != 'thead')[1:]

    players_stats = [[td.getText() for td in rows[row].findAll('td')] for row in range(len(rows))]
    stats = pandas.DataFrame(players_stats, columns = headers)
    stats['Season'] = season

    advanced_stats_per_season.append(stats)

    time.sleep(5)

advanced_stats = pandas.concat(advanced_stats_per_season)
advanced_stats.tail()

mvp_award_voting_per_season = []
for season in seasons[:-1]:
    soup = BeautifulSoup(urlopen(Request('https://www.basketball-reference.com/awards/awards_{}.html'.format(season), headers = {'User-Agent': 'Safari'})))

    headers = [th.getText() for th in soup.findAll('tr', limit = 2)[1].findAll('th')][1:]
    rows = soup.find(lambda x: x.has_attr('id') and x['id'] == 'mvp').findAll('tr', class_ = lambda x: x != 'thead')[1:]

    players_stats = [[td.getText() for td in rows[row].findAll('td')] for row in range(len(rows))]
    stats = pandas.DataFrame(players_stats, columns = headers)
    stats['Season'] = season

    mvp_award_voting_per_season.append(stats)

    time.sleep(5)

mvp_award_voting = pandas.concat(mvp_award_voting_per_season)
mvp_award_voting.tail()

standings_per_season = []
for season in seasons:
    soup = BeautifulSoup(urlopen(Request('https://www.basketball-reference.com/leagues/NBA_{}_standings.html'.format(season), headers = {'User-Agent': 'Safari'})))

    commented_html = []
    for comment in soup.findAll(text = lambda x: isinstance(x, Comment)):
        commented_html.append(comment.extract())

    commented_soup = BeautifulSoup(next(filter(lambda x: 'Expanded Standings Table' in x, commented_html), commented_html[32]))

    headers = [th.getText() for th in commented_soup.findAll('tr', limit = 2)[1].findAll('th')][:3]
    rows = commented_soup.findAll('tr')[2:]

    teams_stats = [[td.getText() for td in rows[row].findAll(lambda x: x.has_attr('data-stat') and x['data-stat'] == 'ranker' or 'team_name' or 'Overall')][:4] for row in range(len(rows))]
    for team_stat in teams_stats:
        team_stat.pop(2)

    stats = pandas.DataFrame(teams_stats, columns = headers)
    stats['Season'] = season

    standings_per_season.append(stats)

    time.sleep(5)

standings_stats = pandas.concat(standings_per_season)
standings_stats.tail()

def remove_asterisk_from_player_name(player: str) -> str:
    return player.replace('*', '')

basic_stats.Player = basic_stats.Player.apply(remove_asterisk_from_player_name)
advanced_stats.Player = advanced_stats.Player.apply(remove_asterisk_from_player_name)

def map_team_name_to_initials(team: str) -> str:
    return {'Atlanta Hawks': 'ATL',
            'Boston Celtics': 'BOS',
            'Brooklyn Nets': 'BRK',
            'Charlotte Bobcats': 'CHA',
            'Charlotte Hornets': 'CHH/CHO',
            'Chicago Bulls': 'CHI',
            'Cleveland Cavaliers': 'CLE',
            'Dallas Mavericks': 'DAL',
            'Denver Nuggets': 'DEN',
            'Detroit Pistons': 'DET',
            'Golden State Warriors': 'GSW',
            'Houston Rockets': 'HOU',
            'Indiana Pacers': 'IND',
            'Kansas City Kings': 'KCK',
            'Los Angeles Clippers': 'LAC',
            'Los Angeles Lakers': 'LAL',
            'Memphis Grizzlies': 'MEM',
            'Miami Heat': 'MIA',
            'Milwaukee Bucks': 'MIL',
            'Minnesota Timberwolves': 'MIN',
            'New Jersey Nets': 'NJN',
            'New Orleans Hornets': 'NOH',
            'New Orleans Pelicans': 'NOP',
            'New Orleans/Oklahoma City Hornets': 'NOK',
            'New York Knicks': 'NYK',
            'Oklahoma City Thunder': 'OKC',
            'Orlando Magic': 'ORL',
            'Philadelphia 76ers': 'PHI',
            'Phoenix Suns': 'PHO',
            'Portland Trail Blazers': 'POR',
            'Sacramento Kings': 'SAC',
            'San Antonio Spurs': 'SAS',
            'San Diego Clippers': 'SDC',
            'Seattle SuperSonics': 'SEA',
            'Toronto Raptors': 'TOR',
            'Utah Jazz': 'UTA',
            'Vancouver Grizzlies': 'VAN',
            'Washington Bullets': 'WSB',
            'Washington Wizards': 'WAS'}[team]

standings_stats.Team = standings_stats.Team.apply(map_team_name_to_initials)
standings_stats.Team[(standings_stats.Team == 'CHH/CHO') & (standings_stats.Season <= 2002)] = 'CHH'
standings_stats.Team[(standings_stats.Team == 'CHH/CHO') & (standings_stats.Season >= 2015)] = 'CHO'

basic_stats['PlayerTmSeason'] = basic_stats.Player.map(str) + basic_stats.Tm.map(str) + basic_stats.Season.map(str)
basic_stats['TmSeason'] = basic_stats.Tm.map(str) + basic_stats.Season.map(str)
advanced_stats['PlayerTmSeason'] = advanced_stats.Player.map(str) + advanced_stats.Tm.map(str) + advanced_stats.Season.map(str)
mvp_award_voting['PlayerTmSeason'] = mvp_award_voting.Player.map(str) + mvp_award_voting.Tm.map(str) + mvp_award_voting.Season.map(str)
standings_stats['TmSeason'] = standings_stats.Team.map(str) + standings_stats.Season.map(str)

df = basic_stats.merge(advanced_stats, on = 'PlayerTmSeason', how = 'left', suffixes = ('', '_remove'))
df = df.merge(mvp_award_voting, on = 'PlayerTmSeason', how = 'left', suffixes = ('', '_remove'))
df = df.merge(standings_stats, on = 'TmSeason', how = 'left', suffixes = ('', '_remove'))

df = df[df.Tm != 'TOT']
df.drop([column for column in df.columns if 'remove' in column], axis = 1, inplace = True)
df.drop(columns = ['\xa0', 'PlayerTmSeason', 'TmSeason', 'Team'], inplace = True)

df.fillna({'G': 0, 'GS': 0, 'MP': 0, 'FG': 0, 'FGA': 0, 'FG%': 0, '3P': 0, '3PA': 0, '3P%': 0, '2P': 0,
           '2PA': 0, '2P%': 0, 'eFG%': 0, 'FT': 0, 'FTA': 0, 'FT%': 0, 'ORB': 0, 'DRB': 0, 'TRB': 0, 'AST': 0,
           'STL': 0, 'BLK': 0, 'TOV': 0, 'PF': 0, 'PTS': 0, 'PER': 0, 'TS%': 0, '3PAr': 0, 'FTr': 0, 'ORB%': 0,
           'DRB%': 0, 'TRB%': 0, 'AST%': 0, 'STL%': 0, 'BLK%': 0, 'TOV%': 0, 'USG%': 0, 'OWS': 0, 'DWS': 0, 'WS': 0,
           'WS/48': 0, 'OBPM': 0, 'DBPM': 0, 'BPM': 0, 'VORP': 0, 'First': 0, 'Pts Won': 0, 'Pts Max': 0, 'Share': 0},
    inplace = True)

float_columns = ['MP', 'FG', 'FGA', '3P', '3PA', '2P', '2PA', 'FT', 'FTA', 'ORB', 'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PF',
                 'PTS', 'PER', 'ORB%', 'DRB%', 'TRB%', 'AST%', 'STL%', 'BLK%', 'TOV%', 'USG%', 'OWS', 'DWS', 'WS', 'OBPM', 'DBPM', 'BPM', 'VORP']
int_columns = ['Age', 'G', 'GS', 'First', 'Pts Won', 'Pts Max', 'Rk']
percentage_float_columns = ['FG%', '3P%', '2P%', 'eFG%', 'FT%', 'TS%', '3PAr', 'FTr', 'WS/48', 'Share']

for column in float_columns:
    if column == 'MP' or 'PER' or 'USG%':
        df[column] = df[column].astype(str).apply(lambda x: '0.0' if x == '' else x)

    df[column] = df[column].astype(float)

for column in int_columns:
    if column == 'GS':
        df[column] = df[column].astype(str).apply(lambda x: '0' if x == '' else x)

    if column == 'First' or 'Pts Won':
        df[column] = df[column].astype(str).apply(lambda x: x[:-2] if '.' in x else x)

    df[column] = df[column].astype(int)

for column in percentage_float_columns:
    if column == 'Share':
        df[column] = df[column].astype(str).apply(lambda x: '0.0' if x == '0' else x).astype(float)
    else:
        df[column] = df[column].apply(lambda x: x.zfill(1)).astype(float)

df.info()

df.to_csv(f'nba_mvp_1980_2024.csv', index = False)

drive.mount('drive')
!cp nba_mvp_1980_2024.csv 'drive/My Drive/'